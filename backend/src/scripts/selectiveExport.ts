/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω—ã)
 */

import { Pool } from 'pg';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '../../.env') });

interface ExportOptions {
  teams?: boolean;
  templates?: boolean;
  games?: boolean;
  activeGamesOnly?: boolean;
  dateFrom?: string;
  dateTo?: string;
}

class SelectiveExporter {
  private pool: Pool;
  private exportDir: string;

  constructor() {
    const config = {
      host: process.env.DB_HOST!,
      port: parseInt(process.env.DB_PORT!),
      database: process.env.DB_NAME!,
      user: process.env.DB_USER!,
      password: process.env.DB_PASSWORD!
    };

    this.pool = new Pool(config);
    
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
    this.exportDir = path.join(process.cwd(), '..', '..', 'exports', `selective-export-${timestamp}`);
  }

  /**
   * –í—ã–±–æ—Ä–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  async export(options: ExportOptions): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...');
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:', options);
      
      await fs.mkdir(this.exportDir, { recursive: true });
      
      let exportSQL = `-- –í—ã–±–æ—Ä–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã
-- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toISOString()}
-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(options, null, 2)}

SET session_replication_role = replica;

`;

      if (options.teams) {
        exportSQL += await this.exportTeams();
      }

      if (options.templates) {
        exportSQL += await this.exportTemplates();
      }

      if (options.games) {
        exportSQL += await this.exportGames(options);
      }

      exportSQL += `\nSET session_replication_role = DEFAULT;\n`;

      await fs.writeFile(path.join(this.exportDir, 'selective_export.sql'), exportSQL);
      
      // –°–æ–∑–¥–∞–µ–º README —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞
      await this.createReadme(options);
      
      console.log('‚úÖ –í—ã–±–æ—Ä–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      console.log(`üì¶ –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: ${this.exportDir}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      throw error;
    } finally {
      await this.pool.end();
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥
   */
  private async exportTeams(): Promise<string> {
    console.log('üë• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã...');
    
    const result = await this.pool.query('SELECT * FROM teams ORDER BY id');
    let sql = '\n-- –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥\nDELETE FROM teams;\n';
    
    for (const row of result.rows) {
      const values = [
        row.id,
        `'${row.name.replace(/'/g, "''")}'`,
        row.logo_path ? `'${row.logo_path}'` : 'NULL',
        `'${row.created_at.toISOString()}'`
      ];
      
      sql += `INSERT INTO teams (id, name, logo_path, created_at) VALUES (${values.join(', ')});\n`;
    }
    
    sql += `SELECT setval('teams_id_seq', (SELECT MAX(id) FROM teams));\n`;
    
    console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${result.rows.length}`);
    return sql;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∏–≥—Ä
   */
  private async exportTemplates(): Promise<string> {
    console.log('üìã –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏–≥—Ä...');
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
    const templatesResult = await this.pool.query('SELECT * FROM game_templates ORDER BY id');
    let sql = '\n-- –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∏–≥—Ä\nDELETE FROM template_rounds;\nDELETE FROM game_templates;\n';
    
    for (const row of templatesResult.rows) {
      const values = [
        row.id,
        `'${row.name.replace(/'/g, "''")}'`,
        row.description ? `'${row.description.replace(/'/g, "''")}'` : 'NULL',
        `'${row.created_at.toISOString()}'`
      ];
      
      sql += `INSERT INTO game_templates (id, name, description, created_at) VALUES (${values.join(', ')});\n`;
    }
    
    sql += `SELECT setval('game_templates_id_seq', (SELECT MAX(id) FROM game_templates));\n`;
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã —à–∞–±–ª–æ–Ω–æ–≤
    const roundsResult = await this.pool.query('SELECT * FROM template_rounds ORDER BY template_id, round_number');
    
    for (const row of roundsResult.rows) {
      const values = [
        row.id,
        row.template_id,
        row.round_number,
        `'${row.name.replace(/'/g, "''")}'`,
        row.max_score
      ];
      
      sql += `INSERT INTO template_rounds (id, template_id, round_number, name, max_score) VALUES (${values.join(', ')});\n`;
    }
    
    sql += `SELECT setval('template_rounds_id_seq', (SELECT MAX(id) FROM template_rounds));\n`;
    
    console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templatesResult.rows.length}`);
    console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: ${roundsResult.rows.length}`);
    return sql;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∏–≥—Ä
   */
  private async exportGames(options: ExportOptions): Promise<string> {
    console.log('üéÆ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã...');
    
    let whereClause = '';
    const conditions = [];
    
    if (options.activeGamesOnly) {
      conditions.push("status IN ('active', 'finished')");
    }
    
    if (options.dateFrom) {
      conditions.push(`created_at >= '${options.dateFrom}'`);
    }
    
    if (options.dateTo) {
      conditions.push(`created_at <= '${options.dateTo}'`);
    }
    
    if (conditions.length > 0) {
      whereClause = 'WHERE ' + conditions.join(' AND ');
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã
    const gamesResult = await this.pool.query(`SELECT * FROM games ${whereClause} ORDER BY id`);
    let sql = '\n-- –≠–∫—Å–ø–æ—Ä—Ç –∏–≥—Ä\nDELETE FROM round_scores;\nDELETE FROM game_participants;\nDELETE FROM games;\n';
    
    const gameIds: number[] = [];
    
    for (const row of gamesResult.rows) {
      gameIds.push(row.id);
      
      const values = [
        row.id,
        `'${row.name.replace(/'/g, "''")}'`,
        row.template_id || 'NULL',
        `'${row.status}'`,
        row.current_round,
        row.event_date ? `'${row.event_date.toISOString()}'` : 'NULL',
        `'${row.created_at.toISOString()}'`
      ];
      
      sql += `INSERT INTO games (id, name, template_id, status, current_round, event_date, created_at) VALUES (${values.join(', ')});\n`;
    }
    
    if (gameIds.length > 0) {
      sql += `SELECT setval('games_id_seq', (SELECT MAX(id) FROM games));\n`;
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä
      const participantsResult = await this.pool.query(
        'SELECT * FROM game_participants WHERE game_id = ANY($1) ORDER BY game_id, id',
        [gameIds]
      );
      
      for (const row of participantsResult.rows) {
        const values = [
          row.id,
          row.game_id,
          row.team_id,
          row.table_number ? `'${row.table_number}'` : 'NULL',
          row.table_code ? `'${row.table_code}'` : 'NULL',
          row.participants_count || 'NULL'
        ];
        
        sql += `INSERT INTO game_participants (id, game_id, team_id, table_number, table_code, participants_count) VALUES (${values.join(', ')});\n`;
      }
      
      sql += `SELECT setval('game_participants_id_seq', (SELECT MAX(id) FROM game_participants));\n`;
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–æ–≤
      const scoresResult = await this.pool.query(
        'SELECT * FROM round_scores WHERE game_id = ANY($1) ORDER BY game_id, round_number, team_id',
        [gameIds]
      );
      
      for (const row of scoresResult.rows) {
        const values = [
          row.id,
          row.game_id,
          row.team_id,
          row.round_number,
          row.score,
          `'${row.created_at.toISOString()}'`
        ];
        
        sql += `INSERT INTO round_scores (id, game_id, team_id, round_number, score, created_at) VALUES (${values.join(', ')});\n`;
      }
      
      sql += `SELECT setval('round_scores_id_seq', (SELECT MAX(id) FROM round_scores));\n`;
      
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–≥—Ä: ${gamesResult.rows.length}`);
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsResult.rows.length}`);
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${scoresResult.rows.length}`);
    } else {
      console.log('‚ÑπÔ∏è  –ò–≥—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return sql;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ README —Ñ–∞–π–ª–∞
   */
  private async createReadme(options: ExportOptions): Promise<void> {
    const readme = `# –í—ã–±–æ—Ä–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã

–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toISOString()}

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞

${JSON.stringify(options, null, 2)}

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Å–ø–æ—Ä—Ç–∞

- **selective_export.sql** - SQL —Å–∫—Ä–∏–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

## –ö–∞–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å

### PostgreSQL
\`\`\`bash
psql -h localhost -U quiz_user -d quiz_game_new -f selective_export.sql
\`\`\`

### –ß–µ—Ä–µ–∑ pgAdmin
1. –û—Ç–∫—Ä–æ–π—Ç–µ pgAdmin
2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
3. –û—Ç–∫—Ä–æ–π—Ç–µ Query Tool
4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª selective_export.sql
5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç

## –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

- –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
- –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–≥—Ä —Ç–∞–∫–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (sequences) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

${options.teams ? '‚úÖ –ö–æ–º–∞–Ω–¥—ã (teams)' : '‚ùå –ö–æ–º–∞–Ω–¥—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã'}
${options.templates ? '‚úÖ –®–∞–±–ª–æ–Ω—ã –∏–≥—Ä (game_templates, template_rounds)' : '‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã'}
${options.games ? '‚úÖ –ò–≥—Ä—ã (games, game_participants, round_scores)' : '‚ùå –ò–≥—Ä—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã'}

${options.activeGamesOnly ? '‚ÑπÔ∏è  –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã' : ''}
${options.dateFrom ? `‚ÑπÔ∏è  –î–∞—Ç–∞ –æ—Ç: ${options.dateFrom}` : ''}
${options.dateTo ? `‚ÑπÔ∏è  –î–∞—Ç–∞ –¥–æ: ${options.dateTo}` : ''}
`;

    await fs.writeFile(path.join(this.exportDir, 'README.md'), readme);
  }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run selective-export [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --teams              –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
  --templates          –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∏–≥—Ä
  --games              –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã
  --active-only        –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
  --date-from YYYY-MM-DD  –ò–≥—Ä—ã –æ—Ç –¥–∞—Ç—ã
  --date-to YYYY-MM-DD    –ò–≥—Ä—ã –¥–æ –¥–∞—Ç—ã

–ü—Ä–∏–º–µ—Ä—ã:
  npm run selective-export -- --teams --templates
  npm run selective-export -- --games --active-only
  npm run selective-export -- --games --date-from 2025-01-01
`);
    return;
  }
  
  const options: ExportOptions = {};
  
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--teams':
        options.teams = true;
        break;
      case '--templates':
        options.templates = true;
        break;
      case '--games':
        options.games = true;
        break;
      case '--active-only':
        options.activeGamesOnly = true;
        break;
      case '--date-from':
        options.dateFrom = args[++i];
        break;
      case '--date-to':
        options.dateTo = args[++i];
        break;
    }
  }
  
  try {
    const exporter = new SelectiveExporter();
    await exporter.export(options);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

export { SelectiveExporter };
