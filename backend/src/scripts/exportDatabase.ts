/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ –¥—Ä—É–≥—É—é –±–∞–∑—É
 */

import { Pool } from 'pg';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '../../.env') });

interface DatabaseConfig {
  host: string;
  port: number;
  database: string;
  user: string;
  password: string;
}

class DatabaseExporter {
  private pool: Pool;
  private config: DatabaseConfig;
  private exportDir: string;

  constructor() {
    this.config = {
      host: process.env.DB_HOST!,
      port: parseInt(process.env.DB_PORT!),
      database: process.env.DB_NAME!,
      user: process.env.DB_USER!,
      password: process.env.DB_PASSWORD!
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!this.config.host || !this.config.port || !this.config.database || 
        !this.config.user || !this.config.password) {
      throw new Error('–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª');
    }

    this.pool = new Pool(this.config);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
    this.exportDir = path.join(process.cwd(), '..', '..', 'exports', `export-${timestamp}`);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async export(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      await fs.mkdir(this.exportDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${this.exportDir}`);

      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      await this.exportSchema();
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.exportData();
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
      await this.copyFiles();
      
      // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞
      await this.createImportScript();
      
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üì¶ –§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: ${this.exportDir}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      throw error;
    } finally {
      await this.pool.end();
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async exportSchema(): Promise<void> {
    console.log('üìã –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const schemaSQL = `
-- Quiz Game Database Schema Export
-- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toISOString()}
-- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.config.database}

-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
DROP TABLE IF EXISTS round_scores CASCADE;
DROP TABLE IF EXISTS game_participants CASCADE;
DROP TABLE IF EXISTS games CASCADE;
DROP TABLE IF EXISTS template_rounds CASCADE;
DROP TABLE IF EXISTS game_templates CASCADE;
DROP TABLE IF EXISTS teams CASCADE;

-- Teams table (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥)
CREATE TABLE teams (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    logo_path VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW()
);

-- Game templates table (—à–∞–±–ª–æ–Ω—ã –∏–≥—Ä)
CREATE TABLE game_templates (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Template rounds table (—Ä–∞—É–Ω–¥—ã —à–∞–±–ª–æ–Ω–æ–≤)
CREATE TABLE template_rounds (
    id SERIAL PRIMARY KEY,
    template_id INTEGER REFERENCES game_templates(id) ON DELETE CASCADE,
    round_number INTEGER NOT NULL,
    name VARCHAR(100) NOT NULL,
    max_score NUMERIC(5,1) NOT NULL
);

-- Games table (–∏–≥—Ä—ã)
CREATE TABLE games (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    template_id INTEGER REFERENCES game_templates(id),
    status VARCHAR(20) DEFAULT 'created', -- 'created', 'active', 'finished'
    current_round INTEGER DEFAULT 0,
    event_date TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Game participants table (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä)
CREATE TABLE game_participants (
    id SERIAL PRIMARY KEY,
    game_id INTEGER REFERENCES games(id) ON DELETE CASCADE,
    team_id INTEGER REFERENCES teams(id),
    table_number VARCHAR(64),
    table_code VARCHAR(64),
    participants_count INTEGER
);

-- Round scores table (–±–∞–ª–ª—ã –∑–∞ —Ä–∞—É–Ω–¥—ã)
CREATE TABLE round_scores (
    id SERIAL PRIMARY KEY,
    game_id INTEGER REFERENCES games(id) ON DELETE CASCADE,
    team_id INTEGER REFERENCES teams(id),
    round_number INTEGER NOT NULL,
    score NUMERIC(5,1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_games_status ON games(status);
CREATE INDEX idx_game_participants_game ON game_participants(game_id);
CREATE INDEX idx_round_scores_game_round ON round_scores(game_id, round_number);
CREATE UNIQUE INDEX idx_round_scores_unique ON round_scores(game_id, team_id, round_number);
CREATE INDEX idx_teams_name ON teams(name);

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
COMMENT ON TABLE teams IS '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥';
COMMENT ON TABLE game_templates IS '–®–∞–±–ª–æ–Ω—ã –∏–≥—Ä';
COMMENT ON TABLE template_rounds IS '–†–∞—É–Ω–¥—ã —à–∞–±–ª–æ–Ω–æ–≤';
COMMENT ON TABLE games IS '–ò–≥—Ä—ã';
COMMENT ON TABLE game_participants IS '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä';
COMMENT ON TABLE round_scores IS '–ë–∞–ª–ª—ã –∑–∞ —Ä–∞—É–Ω–¥—ã';
`;

    await fs.writeFile(path.join(this.exportDir, '01_schema.sql'), schemaSQL);
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
   */
  private async exportData(): Promise<void> {
    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    const tables = [
      'teams',
      'game_templates', 
      'template_rounds',
      'games',
      'game_participants',
      'round_scores'
    ];

    let dataSQL = `-- Quiz Game Database Data Export
-- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toISOString()}
-- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.config.database}

-- –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
SET session_replication_role = replica;

`;

    for (const table of tables) {
      console.log(`  üìã –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É: ${table}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const result = await this.pool.query(`SELECT * FROM ${table} ORDER BY id`);
      
      if (result.rows.length > 0) {
        dataSQL += `\n-- –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ${table}\n`;
        dataSQL += `DELETE FROM ${table};\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        const columns = Object.keys(result.rows[0]);
        
        for (const row of result.rows) {
          const values = columns.map(col => {
            const value = row[col];
            if (value === null) return 'NULL';
            if (typeof value === 'string') {
              return `'${value.replace(/'/g, "''")}'`;
            }
            if (value instanceof Date) {
              return `'${value.toISOString()}'`;
            }
            return value;
          });
          
          dataSQL += `INSERT INTO ${table} (${columns.join(', ')}) VALUES (${values.join(', ')});\n`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è SERIAL –ø–æ–ª–µ–π
        if (columns.includes('id')) {
          dataSQL += `SELECT setval('${table}_id_seq', (SELECT MAX(id) FROM ${table}));\n`;
        }
      } else {
        dataSQL += `\n-- –¢–∞–±–ª–∏—Ü–∞ ${table} –ø—É—Å—Ç–∞\n`;
      }
    }

    dataSQL += `\n-- –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
SET session_replication_role = DEFAULT;
`;

    await fs.writeFile(path.join(this.exportDir, '02_data.sql'), dataSQL);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–ª–æ–≥–æ—Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥)
   */
  private async copyFiles(): Promise<void> {
    console.log('üìÅ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...');
    
    try {
      const uploadsDir = path.join(process.cwd(), '..', '..', 'uploads');
      const exportUploadsDir = path.join(this.exportDir, 'uploads');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
      await fs.mkdir(exportUploadsDir, { recursive: true });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads
      try {
        const files = await fs.readdir(uploadsDir);
        
        if (files.length > 0) {
          console.log(`  üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
          
          for (const file of files) {
            const sourcePath = path.join(uploadsDir, file);
            const destPath = path.join(exportUploadsDir, file);
            await fs.copyFile(sourcePath, destPath);
            console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file}`);
          }
        } else {
          console.log('  üìã –§–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (error) {
        console.log('  üìã –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
      }
      
      console.log('‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞
   */
  private async createImportScript(): Promise<void> {
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞...');
    
    const importScript = `#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toISOString()}

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ psql
if ! command -v psql &> /dev/null; then
    echo "‚ùå psql –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client."
    exit 1
fi

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
DB_HOST=\${DB_HOST:-localhost}
DB_PORT=\${DB_PORT:-5432}
DB_NAME=\${DB_NAME:-quiz_game_new}
DB_USER=\${DB_USER:-quiz_user}

echo "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
echo "  –•–æ—Å—Ç: \$DB_HOST"
echo "  –ü–æ—Ä—Ç: \$DB_PORT"
echo "  –ë–∞–∑–∞: \$DB_NAME"
echo "  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \$DB_USER"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
if ! psql -h "\$DB_HOST" -p "\$DB_PORT" -U "\$DB_USER" -d "\$DB_NAME" -c "SELECT 1;" > /dev/null 2>&1; then
    echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞."
    exit 1
fi

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
echo "üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
psql -h "\$DB_HOST" -p "\$DB_PORT" -U "\$DB_USER" -d "\$DB_NAME" -f "01_schema.sql"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
echo "üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."
psql -h "\$DB_HOST" -p "\$DB_PORT" -U "\$DB_USER" -d "\$DB_NAME" -f "02_data.sql"

echo "‚úÖ –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -d "uploads" ] && [ "\$(ls -A uploads)" ]; then
    echo "üìÅ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã..."
    echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 'uploads' –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    echo "–û–±—ã—á–Ω–æ —ç—Ç–æ: ../uploads/ –∏–ª–∏ /path/to/your/app/uploads/"
else
    echo "üìÅ –§–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo "üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!"
`;

    await fs.writeFile(path.join(this.exportDir, 'import.sh'), importScript);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ Windows –≤–µ—Ä—Å–∏—é
    const importBat = `@echo off
REM –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã –¥–ª—è Windows
REM –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toISOString()}

echo üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...

REM –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
if "%DB_HOST%"=="" set DB_HOST=localhost
if "%DB_PORT%"=="" set DB_PORT=5432
if "%DB_NAME%"=="" set DB_NAME=quiz_game_new
if "%DB_USER%"=="" set DB_USER=quiz_user

echo üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
echo   –•–æ—Å—Ç: %DB_HOST%
echo   –ü–æ—Ä—Ç: %DB_PORT%
echo   –ë–∞–∑–∞: %DB_NAME%
echo   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %DB_USER%

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ psql
where psql >nul 2>nul
if %errorlevel% neq 0 (
    echo ‚ùå psql –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client.
    pause
    exit /b 1
)

REM –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
echo üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...
psql -h "%DB_HOST%" -p "%DB_PORT%" -U "%DB_USER%" -d "%DB_NAME%" -f "01_schema.sql"
if %errorlevel% neq 0 (
    echo ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    pause
    exit /b 1
)

REM –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
echo üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...
psql -h "%DB_HOST%" -p "%DB_PORT%" -U "%DB_USER%" -d "%DB_NAME%" -f "02_data.sql"
if %errorlevel% neq 0 (
    echo ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö
    pause
    exit /b 1
)

echo ‚úÖ –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!

REM –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
if exist "uploads" (
    echo üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ uploads
    echo –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 'uploads' –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
) else (
    echo üìÅ –§–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
)

echo üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!
pause
`;

    await fs.writeFile(path.join(this.exportDir, 'import.bat'), importBat);
    
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getStats(): Promise<void> {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    const tables = [
      'teams',
      'game_templates', 
      'template_rounds',
      'games',
      'game_participants',
      'round_scores'
    ];

    for (const table of tables) {
      const result = await this.pool.query(`SELECT COUNT(*) as count FROM ${table}`);
      console.log(`  ${table}: ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
async function main() {
  try {
    const exporter = new DatabaseExporter();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    await exporter.getStats();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    await exporter.export();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { DatabaseExporter };
