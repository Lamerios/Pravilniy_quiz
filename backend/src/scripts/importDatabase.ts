/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑-–∏–≥—Ä—ã
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

import { Pool } from 'pg';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '../../.env') });

interface ImportOptions {
  importDir: string;
  skipSchema?: boolean;
  skipData?: boolean;
  clearExisting?: boolean;
}

class DatabaseImporter {
  private pool: Pool;
  private config: any;

  constructor() {
    this.config = {
      host: process.env.DB_HOST!,
      port: parseInt(process.env.DB_PORT!),
      database: process.env.DB_NAME!,
      user: process.env.DB_USER!,
      password: process.env.DB_PASSWORD!
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!this.config.host || !this.config.port || !this.config.database || 
        !this.config.user || !this.config.password) {
      throw new Error('–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª');
    }

    this.pool = new Pool(this.config);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞
   */
  async import(options: ImportOptions): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∞: ${options.importDir}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.testConnection();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      await this.validateImportFiles(options);
      
      if (!options.skipSchema) {
        await this.importSchema(options);
      }
      
      if (!options.skipData) {
        await this.importData(options);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
      await this.showStats();
      
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
      throw error;
    } finally {
      await this.pool.end();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async testConnection(): Promise<void> {
    try {
      const result = await this.pool.query('SELECT NOW()');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      console.log(`üìÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].now}`);
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
   */
  private async validateImportFiles(options: ImportOptions): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–º–ø–æ—Ä—Ç–∞...');
    
    const schemaFile = path.join(options.importDir, '01_schema.sql');
    const dataFile = path.join(options.importDir, '02_data.sql');
    
    if (!options.skipSchema) {
      try {
        await fs.access(schemaFile);
        console.log('‚úÖ –§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–π–¥–µ–Ω');
      } catch (error) {
        throw new Error(`–§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: ${schemaFile}`);
      }
    }
    
    if (!options.skipData) {
      try {
        await fs.access(dataFile);
        console.log('‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω');
      } catch (error) {
        throw new Error(`–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: ${dataFile}`);
      }
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async importSchema(options: ImportOptions): Promise<void> {
    console.log('üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const schemaFile = path.join(options.importDir, '01_schema.sql');
    const schemaSQL = await fs.readFile(schemaFile, 'utf-8');
    
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      await this.pool.query(schemaSQL);
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
      throw error;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  private async importData(options: ImportOptions): Promise<void> {
    console.log('üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    const dataFile = path.join(options.importDir, '02_data.sql');
    const dataSQL = await fs.readFile(dataFile, 'utf-8');
    
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç –¥–∞–Ω–Ω—ã—Ö
      await this.pool.query(dataSQL);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async clearExistingData(): Promise<void> {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    
    const clearSQL = `
      -- –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
      SET session_replication_role = replica;
      
      -- –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      DELETE FROM round_scores;
      DELETE FROM game_participants;
      DELETE FROM games;
      DELETE FROM template_rounds;
      DELETE FROM game_templates;
      DELETE FROM teams;
      
      -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      SELECT setval('teams_id_seq', 1, false);
      SELECT setval('game_templates_id_seq', 1, false);
      SELECT setval('template_rounds_id_seq', 1, false);
      SELECT setval('games_id_seq', 1, false);
      SELECT setval('game_participants_id_seq', 1, false);
      SELECT setval('round_scores_id_seq', 1, false);
      
      -- –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
      SET session_replication_role = DEFAULT;
    `;
    
    try {
      await this.pool.query(clearSQL);
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
   */
  private async showStats(): Promise<void> {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞:');
    
    const tables = [
      'teams',
      'game_templates', 
      'template_rounds',
      'games',
      'game_participants',
      'round_scores'
    ];

    for (const table of tables) {
      try {
        const result = await this.pool.query(`SELECT COUNT(*) as count FROM ${table}`);
        console.log(`  ${table}: ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`  ${table}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ`);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async validateIntegrity(): Promise<void> {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...');
    
    const checks = [
      {
        name: '–®–∞–±–ª–æ–Ω—ã –±–µ–∑ —Ä–∞—É–Ω–¥–æ–≤',
        query: `
          SELECT gt.id, gt.name 
          FROM game_templates gt 
          LEFT JOIN template_rounds tr ON gt.id = tr.template_id 
          WHERE tr.id IS NULL
        `
      },
      {
        name: '–ò–≥—Ä—ã –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        query: `
          SELECT g.id, g.name 
          FROM games g 
          LEFT JOIN game_participants gp ON g.id = gp.game_id 
          WHERE gp.id IS NULL
        `
      },
      {
        name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥',
        query: `
          SELECT gp.id, gp.game_id 
          FROM game_participants gp 
          LEFT JOIN teams t ON gp.team_id = t.id 
          WHERE t.id IS NULL
        `
      },
      {
        name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –∏–≥—Ä',
        query: `
          SELECT rs.id 
          FROM round_scores rs 
          LEFT JOIN games g ON rs.game_id = g.id 
          WHERE g.id IS NULL
        `
      }
    ];

    for (const check of checks) {
      try {
        const result = await this.pool.query(check.query);
        if (result.rows.length > 0) {
          console.log(`‚ö†Ô∏è  ${check.name}: ${result.rows.length} –ø—Ä–æ–±–ª–µ–º`);
          result.rows.forEach((row, index) => {
            if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
              console.log(`    ${JSON.stringify(row)}`);
            }
          });
          if (result.rows.length > 3) {
            console.log(`    ... –∏ –µ—â–µ ${result.rows.length - 3}`);
          }
        } else {
          console.log(`‚úÖ ${check.name}: OK`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ "${check.name}": ${error}`);
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
async function createBackup(): Promise<string> {
  console.log('üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º...');
  
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
  const backupDir = path.join(process.cwd(), '..', '..', 'backups', `backup-${timestamp}`);
  
  try {
    await fs.mkdir(backupDir, { recursive: true });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ pg_dump
    
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupDir}`);
    return backupDir;
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:', error);
    return '';
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run import-db [–æ–ø—Ü–∏–∏] <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è_–∏–º–ø–æ—Ä—Ç–∞>

–û–ø—Ü–∏–∏:
  --skip-schema        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  --skip-data          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  --clear-existing     –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  --validate           –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
  --backup             –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º

–ü—Ä–∏–º–µ—Ä—ã:
  npm run import-db exports/export-2025-09-14T10-30-00
  npm run import-db --skip-schema exports/export-2025-09-14T10-30-00
  npm run import-db --clear-existing --validate exports/export-2025-09-14T10-30-00
`);
    return;
  }
  
  const options: ImportOptions = {
    importDir: '',
    skipSchema: false,
    skipData: false,
    clearExisting: false
  };
  
  let validate = false;
  let backup = false;
  
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--skip-schema':
        options.skipSchema = true;
        break;
      case '--skip-data':
        options.skipData = true;
        break;
      case '--clear-existing':
        options.clearExisting = true;
        break;
      case '--validate':
        validate = true;
        break;
      case '--backup':
        backup = true;
        break;
      default:
        if (!args[i].startsWith('--')) {
          options.importDir = args[i];
        }
        break;
    }
  }
  
  if (!options.importDir) {
    console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∞');
    process.exit(1);
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
  if (!path.isAbsolute(options.importDir)) {
    options.importDir = path.join(process.cwd(), '..', '..', options.importDir);
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (backup) {
      await createBackup();
    }
    
    const importer = new DatabaseImporter();
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (options.clearExisting) {
      await importer.clearExistingData();
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
    await importer.import(options);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (validate) {
      await importer.validateIntegrity();
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

export { DatabaseImporter };
