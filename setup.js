#!/usr/bin/env node

/**
 * Project Setup Script
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω—É–ª—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–∞–º–∏\n');
console.log('üìã –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–≥—Ä\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`)
};

// 1. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
log.info('–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...');
const dirs = ['uploads', 'logs'];
dirs.forEach(dir => {
  const dirPath = path.join(__dirname, dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    log.success(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
  } else {
    log.info(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dir}`);
  }
});

// 2. –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
log.info('\n–ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');

// Backend .env
const backendEnvSource = path.join(__dirname, 'config', 'backend.env');
const backendEnvTarget = path.join(__dirname, 'backend', '.env');
if (!fs.existsSync(backendEnvTarget)) {
  if (fs.existsSync(backendEnvSource)) {
    fs.copyFileSync(backendEnvSource, backendEnvTarget);
    log.success('–°–æ–∑–¥–∞–Ω backend/.env');
  } else {
    log.error('–ù–µ –Ω–∞–π–¥–µ–Ω config/backend.env');
  }
} else {
  log.warning('backend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
}

// Frontend .env
const frontendEnvSource = path.join(__dirname, 'config', 'frontend.env');
const frontendEnvTarget = path.join(__dirname, 'frontend', '.env');
if (!fs.existsSync(frontendEnvTarget)) {
  if (fs.existsSync(frontendEnvSource)) {
    fs.copyFileSync(frontendEnvSource, frontendEnvTarget);
    log.success('–°–æ–∑–¥–∞–Ω frontend/.env');
  } else {
    log.error('–ù–µ –Ω–∞–π–¥–µ–Ω config/frontend.env');
  }
} else {
  log.warning('frontend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
}

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json —Ñ–∞–π–ª—ã
log.info('\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');

const checkPackageJson = (dir) => {
  const packagePath = path.join(__dirname, dir, 'package.json');
  if (fs.existsSync(packagePath)) {
    log.success(`${dir}/package.json –Ω–∞–π–¥–µ–Ω`);
    return true;
  } else {
    log.error(`${dir}/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return false;
  }
};

const hasBackendPackage = checkPackageJson('backend');
const hasFrontendPackage = checkPackageJson('frontend');

// 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
console.log('\n' + '='.repeat(50));
console.log('üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
console.log('='.repeat(50) + '\n');

console.log('1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL');
console.log('   - –í—ã–ø–æ–ª–Ω–∏—Ç–µ: psql -U postgres -f config/database.sql');
console.log('   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker: docker compose up -d\n');

if (hasBackendPackage) {
  console.log('2. –ó–∞–ø—É—Å–∫ Backend:');
  console.log('   cd backend');
  console.log('   npm install');
  console.log('   npm run db:seed');
  console.log('   npm run dev\n');
}

if (hasFrontendPackage) {
  console.log('3. –ó–∞–ø—É—Å–∫ Frontend:');
  console.log('   cd frontend');
  console.log('   npm install');
  console.log('   npm start\n');
}

console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞:');
console.log('   - Backend API: http://localhost:5001/health');
console.log('   - Frontend: http://localhost:3000');
console.log('   - API Docs: http://localhost:5001/api-docs (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)\n');

// 5. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
const startScript = `#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

echo "Starting Quiz Game Project..."

# Start backend
cd backend
npm run dev &
BACKEND_PID=$!

# Wait for backend to start
sleep 5

# Start frontend
cd ../frontend
npm start &
FRONTEND_PID=$!

echo "Backend PID: $BACKEND_PID"
echo "Frontend PID: $FRONTEND_PID"
echo "Press Ctrl+C to stop all services"

# Wait for interrupt
wait
`;

const startScriptPath = path.join(__dirname, 'start.sh');
fs.writeFileSync(startScriptPath, startScript);
log.success('–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start.sh –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞');

// 6. –°–æ–∑–¥–∞–µ–º Windows batch —Ñ–∞–π–ª
const startBatch = `@echo off
echo Starting Quiz Game Project...

start "Backend" cmd /k "cd backend && npm run dev"
timeout /t 5
start "Frontend" cmd /k "cd frontend && npm start"

echo.
echo Backend and Frontend started in separate windows
echo Close windows to stop services
pause
`;

const startBatchPath = path.join(__dirname, 'start.bat');
fs.writeFileSync(startBatchPath, startBatch);
log.success('–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start.bat –¥–ª—è Windows');

console.log('\n' + '='.repeat(50));
log.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('='.repeat(50));

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö .env —Ñ–∞–π–ª–æ–≤
log.info('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
if (fs.existsSync(backendEnvTarget)) {
  const envContent = fs.readFileSync(backendEnvTarget, 'utf8');
  if (envContent.includes('DB_HOST') && envContent.includes('DB_PORT')) {
    log.success('backend/.env –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    log.warning('backend/.env —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  }
}

if (fs.existsSync(frontendEnvTarget)) {
  const envContent = fs.readFileSync(frontendEnvTarget, 'utf8');
  if (envContent.includes('REACT_APP_API_URL')) {
    log.success('frontend/.env –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    log.warning('frontend/.env —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  }
}
