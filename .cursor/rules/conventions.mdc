# üìã conventions.md - –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞

> **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è code –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞**
> 
> –û—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∏–∑ [@vision.md](./vision.md) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã

---

## üéØ –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### **KISS - Keep It Simple, Stupid**
- –í—ã–±–∏—Ä–∞–π –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å
- –ù–∏–∫–∞–∫–∏—Ö "–∞ —á—Ç–æ –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º..."

### **–û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑**
- –†–µ–∞–ª–∏–∑—É–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–Ω—É —Ñ–∏—á—É –æ—Ç API –¥–æ UI
- –ù–ï –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é, –ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –¢–µ—Å—Ç–∏—Ä—É–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π

### **–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ä–µ–∑—ã**
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Üí API ‚Üí UI –¥–ª—è –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
- –ù–ï –≤—Å–µ API —Å—Ä–∞–∑—É, –ø–æ—Ç–æ–º –≤–µ—Å—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

---

## üìÅ –§–∞–π–ª–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

### **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤:**
- ‚ùå –§–∞–π–ª—ã –±–æ–ª—å—à–µ 200 —Å—Ç—Ä–æ–∫ - —Ä–∞–∑–±–∏–≤–∞–π –Ω–∞ –º–æ–¥—É–ª–∏
- ‚ùå –ë–æ–ª–µ–µ 3-4 –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑
- ‚úÖ –û–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç = –æ–¥–∏–Ω —Ñ–∞–π–ª

### **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**
- –ú–∞–∫—Å–∏–º—É–º 3 —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
- –ò–º–µ–Ω–∞ –ø–∞–ø–æ–∫ –≤ kebab-case
- –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

---

## üîß –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–¥–∞

### **TypeScript:**
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —è–≤–Ω—ã–µ —Ç–∏–ø—ã
interface CreateGameRequest {
  name: string;
  templateId: number;
  teamIds: number[];
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - any types
const createGame = (data: any) => { ... }
```

### **React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã + —Ö—É–∫–∏
export const GameBoard: React.FC<GameBoardProps> = ({ gameId }) => {
  const [scores, setScores] = useState<Score[]>([]);
  // ...
};

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∫–ª–∞—Å—Å–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
class GameBoard extends React.Component { ... }
```

### **API endpoints:**
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - RESTful + –≤–∞–ª–∏–¥–∞—Ü–∏—è
router.post('/games', validateCreateGame, async (req, res) => {
  try {
    const game = await gameService.create(req.body);
    res.status(201).json(game);
  } catch (error) {
    logger.error('Game creation failed', { error: error.message });
    res.status(500).json({ error: 'Internal server error' });
  }
});
```

---

## üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–¥–∞

### **JSDoc –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π:**
```typescript
/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
 * @param gameData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
 * @param gameData.name - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
 * @param gameData.templateId - ID —à–∞–±–ª–æ–Ω–∞ –∏–≥—Ä—ã
 * @returns Promise —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä–æ–π
 * @throws Error –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export async function createGame(gameData: CreateGameRequest): Promise<Game> {
  // ...
}
```

### **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏:**
```typescript
// –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞: —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –≤—Å–µ —Ä–∞—É–Ω–¥—ã
const totalScore = roundScores.reduce((sum, score) => sum + score.points, 0);

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—á–µ—Ç–∞
if (game.status !== 'active') {
  throw new Error('Cannot update scores for inactive game');
}
```

---

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞

### **Backend - –∫–∞–∂–¥—ã–π endpoint:**
```typescript
// tests/routes/games.test.ts
describe('POST /games', () => {
  it('should create game with valid data', async () => {
    const response = await request(app)
      .post('/games')
      .send(validGameData)
      .expect(201);
    
    expect(response.body.name).toBe(validGameData.name);
  });
});
```

### **Frontend - –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:**
```typescript
// components/__tests__/GameBoard.test.tsx
describe('GameBoard', () => {
  it('renders team scores correctly', () => {
    render(<GameBoard gameId={1} />);
    expect(screen.getByText('Team Alpha')).toBeInTheDocument();
  });
});
```

---

## üîÑ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–∞–∑—É

### **–í–∏–¥–∏—à—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—à—å:**
```typescript
// ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
const validateTeamName = (name: string) => name.length > 0 && name.length <= 100;
const validateGameName = (name: string) => name.length > 0 && name.length <= 100;

// ‚úÖ –í—ã–Ω–æ—Å–∏–º –≤ utils
export const validateName = (name: string, maxLength = 100) => 
  name.length > 0 && name.length <= maxLength;
```

### **–§–∞–π–ª –±–æ–ª—å—à–µ 200 —Å—Ç—Ä–æ–∫ - —Ä–∞–∑–±–∏–≤–∞–µ—à—å:**
```typescript
// ‚ùå –û–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
// gameService.ts (300+ lines)

// ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–æ–¥—É–ª–∏
// services/game/gameService.ts
// services/game/gameValidation.ts  
// services/game/gameRepository.ts
```

---

## üö¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

### **Backend:**
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –ª–æ–≥–∏—Ä—É–µ–º + –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
try {
  const game = await gameRepository.findById(gameId);
  if (!game) {
    logger.warn('Game not found', { gameId });
    return res.status(404).json({ error: 'Game not found' });
  }
} catch (error) {
  logger.error('Database error', { error: error.message, gameId });
  return res.status(500).json({ error: 'Internal server error' });
}
```

### **Frontend:**
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const [error, setError] = useState<string>('');

try {
  await gameApi.updateScore(gameId, teamId, score);
} catch (err) {
  setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  console.error('Score update failed', err);
}
```

---

## üìä –°–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—é

### **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏:**
```typescript
// ‚úÖ camelCase
const gameScore = 15;
const updateTeamScore = () => {};

// ‚úÖ –ì–ª–∞–≥–æ–ª—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
const calculateTotalScore = () => {};
const fetchGameData = () => {};
```

### **–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã:**
```typescript
// ‚úÖ UPPER_SNAKE_CASE
const MAX_TEAMS_PER_GAME = 20;
const DEFAULT_ROUND_SCORE = 0;
```

### **–¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:**
```typescript
// ‚úÖ PascalCase
interface GameData {
  id: number;
  name: string;
}

type ScoreUpdateRequest = {
  teamId: number;
  score: number;
};
```

---

## üé¨ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### **–ü–æ—Ä—è–¥–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–º. [@vision.md](./vision.md)):**
1. **–®–∞–±–ª–æ–Ω—ã –∏–≥—Ä** - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
2. **–ö–æ–º–∞–Ω–¥—ã** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
3. **–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä** - —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ —à–∞–±–ª–æ–Ω–æ–≤
4. **–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
5. **–ü—É–±–ª–∏—á–Ω–æ–µ —Ç–∞–±–ª–æ** - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

### **–ö–∞–∂–¥–∞—è —Ñ–∏—á–∞ = –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:**
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–º–∏–≥—Ä–∞—Ü–∏–∏ + –º–æ–¥–µ–ª–∏)
- Backend API (endpoints + –≤–∞–ª–∏–¥–∞—Ü–∏—è + —Ç–µ—Å—Ç—ã)
- Frontend UI (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è + —Ç–µ—Å—Ç—ã)

---

## ‚ö° –ó–∞–ø—Ä–µ—â–µ–Ω–æ

- ‚ùå –ö–ª–∞—Å—Å–æ–≤—ã–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
- ‚ùå –§–∞–π–ª—ã –±–æ–ª—å—à–µ 200 —Å—Ç—Ä–æ–∫
- ‚ùå any —Ç–∏–ø—ã –≤ TypeScript
- ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ (–≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π)
- ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –∫–æ–¥–µ (—Ç–æ–ª—å–∫–æ JSDoc)
- ‚ùå –ù–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é —Ñ–∏—á—É, –ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

---

> üí° **–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ**: –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è - –≤—ã–±–∏—Ä–∞–π –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –æ–±—Ä–∞—â–∞–π—Å—è –∫ [@vision.md](./vision.md) –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.