# 🔄 workflow.md - Правила выполнения работ

> **Инструкция для кодового ассистента по разработке проекта "Правильный Квиз"**
> 
> Основано на [@vision.md](./vision.md), [@conventions.md](./conventions.md) и [@tasklist.md](./tasklist.md)

---

## 🎯 Главные принципы

### **KISS - Keep It Simple, Stupid**
- Простейшее решение, которое работает
- При сомнениях - более простой путь
- Никаких "а что если в будущем..."

### **Одна итерация за раз**
- ❌ НЕ начинать новую итерацию, пока предыдущая не завершена
- ✅ Полный цикл: БД → API → UI → Тесты
- ✅ Обязательное подтверждение работоспособности

---

## 📋 Процесс выполнения итерации

### **1. 📋 Планирование**
```
🔍 Изучить текущую итерацию в @tasklist.md
📝 Предложить техническое решение:
   - Структура файлов (макс 3-4 файла за раз)
   - Ключевые функции и API endpoints
   - Основные React компоненты
   
⏸️ ОЖИДАТЬ СОГЛАСОВАНИЯ перед реализацией
```

### **2. 🔧 Реализация**
```
📁 База данных (если нужно):
   - SQL миграции
   - Модели данных
   
🔌 Backend API:
   - Endpoints с валидацией
   - Тесты для каждого endpoint
   
🎨 Frontend UI:
   - React компоненты
   - Интеграция с API
   
📊 Файлы ≤ 200 строк (см. @conventions.md)
```

### **3. ✅ Проверка**
```
🧪 Запустить тесты
🖥️ Проверить описанный сценарий из @tasklist.md
📝 Обновить прогресс в @tasklist.md:
   - Отметить выполненные задачи [ ] → [x]
   - Обновить статус: ⏸️ → ⏳ → ✅
   
⏸️ ОЖИДАТЬ ПОДТВЕРЖДЕНИЯ функциональности
```

### **4. 💾 Фиксация**
```
📦 Сделать git commit с описанием:
   "feat: Итерация N - [Название функционала]"
   
🔄 Согласовать переход к следующей итерации
```

---

## 📂 Правила создания файлов

### **Ограничения:**
- ❌ Файлы больше 200 строк
- ❌ Более 3-4 новых файлов за раз
- ❌ Игнорирование структуры из [@vision.md](./vision.md)

### **Структура:**
```
backend/src/
├── routes/     # API endpoints
├── services/   # Бизнес-логика  
├── models/     # Типы данных
└── db/         # Подключение к БД

frontend/src/
├── components/ # React компоненты
├── services/   # API клиенты
└── types/      # TypeScript типы
```

---

## 🚫 Что ЗАПРЕЩЕНО

### **Нарушения процесса:**
- ❌ Начинать реализацию без согласования
- ❌ Переходить к следующей итерации без подтверждения
- ❌ Создавать код без тестов
- ❌ Игнорировать ошибки или сломанную функциональность

### **Нарушения кода:**
- ❌ any типы в TypeScript
- ❌ Классовые React компоненты
- ❌ Файлы без JSDoc документации
- ❌ API без обработки ошибок

---

## 🔄 Алгоритм работы

### **Начало итерации:**
```
1. Прочитать текущую итерацию в @tasklist.md
2. Предложить план реализации с примерами кода
3. ОЖИДАТЬ СОГЛАСОВАНИЯ
4. Реализовать согласованный план
5. Протестировать функциональность
6. Обновить @tasklist.md
7. ОЖИДАТЬ ПОДТВЕРЖДЕНИЯ
8. Сделать commit
9. Согласовать переход к следующей итерации
```

### **Пример предложения:**
```
📋 Итерация 1: Шаблоны игр (CRUD)

Предлагаю реализовать:

1. Backend (3 файла):
   - routes/templates.ts - API endpoints
   - services/templateService.ts - бизнес-логика
   - models/Template.ts - типы данных

2. Frontend (2 файла):
   - components/TemplateList.tsx - список шаблонов
   - components/TemplateForm.tsx - форма создания

Ключевые функции:
- POST /api/templates - создание шаблона
- GET /api/templates - список шаблонов
- React форма с валидацией

Согласовать план?
```

---

## 📊 Обновление прогресса

### **В @tasklist.md:**
```markdown
| Итерация | Функционал | Статус | Дата завершения |
|----------|------------|--------|-----------------|
| 🎯 **1** | Шаблоны игр | ✅ Завершено | 2025-03-15 |
```

### **В задачах итерации:**
```markdown
### 🗄️ Backend API
- [x] POST /api/templates - создание шаблона
- [x] GET /api/templates - список шаблонов
- [ ] GET /api/templates/:id - получение шаблона
```

---

## ⚡ Быстрые правила

- 📋 **План** → 🔧 **Код** → ✅ **Тест** → 💾 **Commit**
- ⏸️ **Согласование** на каждом шаге
- 📁 **Файлы ≤ 200 строк**
- 🎯 **Одна итерация за раз**
- 🚫 **Fail Fast** - ошибка = стоп

---

> 💡 **Помни:** Цель - рабочий MVP. KISS превыше всего!